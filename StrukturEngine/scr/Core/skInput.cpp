#include "skInput.h"

std::unordered_map<std::string, KeyboardKey> Struktur::Core::skInput::s_keycodeMap = {
	{"return",              SDLK_RETURN},
	{"escape",              SDLK_ESCAPE},
	{"backspace",           SDLK_BACKSPACE},
	{"tab",                 SDLK_TAB},
	{"space",               SDLK_SPACE},
	{"exclaim",             SDLK_EXCLAIM},
	{"quotedbl",            SDLK_QUOTEDBL},
	{"hash",                SDLK_HASH},
	{"percent",             SDLK_PERCENT},
	{"dollar",              SDLK_DOLLAR},
	{"ampersand",           SDLK_AMPERSAND},
	{"quotesingle",         SDLK_QUOTE},
	{"leftparen",           SDLK_LEFTPAREN},
	{"rightparen",          SDLK_RIGHTPAREN},
	{"asterisk",            SDLK_ASTERISK},
	{"plus",                SDLK_PLUS},
	{"comma",               SDLK_COMMA},
	{"minus",               SDLK_MINUS},
	{"period",              SDLK_PERIOD},
	{"slash",               SDLK_SLASH},
	{"0",                   SDLK_0},
	{"1",                   SDLK_1},
	{"2",                   SDLK_2},
	{"3",                   SDLK_3},
	{"4",                   SDLK_4},
	{"5",                   SDLK_5},
	{"6",                   SDLK_6},
	{"7",                   SDLK_7},
	{"8",                   SDLK_8},
	{"9",                   SDLK_9},
	{"colon",               SDLK_COLON},
	{"semicolon",           SDLK_SEMICOLON},
	{"less",                SDLK_LESS},
	{"equals",              SDLK_EQUALS},
	{"greater",             SDLK_GREATER},
	{"question",            SDLK_QUESTION},
	{"at",                  SDLK_AT},
	{"leftbracket",         SDLK_LEFTBRACKET},
	{"backslash",           SDLK_BACKSLASH},
	{"rightbracket",        SDLK_RIGHTBRACKET},
	{"caret",               SDLK_CARET},
	{"underscore",          SDLK_UNDERSCORE},
	{"backquote",           SDLK_BACKQUOTE},
	{"a",                   SDLK_a},
	{"b",                   SDLK_b},
	{"c",                   SDLK_c},
	{"d",                   SDLK_d},
	{"e",                   SDLK_e},
	{"f",                   SDLK_f},
	{"g",                   SDLK_g},
	{"h",                   SDLK_h},
	{"i",                   SDLK_i},
	{"j",                   SDLK_j},
	{"k",                   SDLK_k},
	{"l",                   SDLK_l},
	{"m",                   SDLK_m},
	{"n",                   SDLK_n},
	{"o",                   SDLK_o},
	{"p",                   SDLK_p},
	{"q",                   SDLK_q},
	{"r",                   SDLK_r},
	{"s",                   SDLK_s},
	{"t",                   SDLK_t},
	{"u",                   SDLK_u},
	{"v",                   SDLK_v},
	{"w",                   SDLK_w},
	{"x",                   SDLK_x},
	{"y",                   SDLK_y},
	{"z",                   SDLK_z},
	{"capslock",            SDLK_CAPSLOCK},
	{"f1",                  SDLK_F1},
	{"f2",                  SDLK_F2},
	{"f3",                  SDLK_F3},
	{"f4",                  SDLK_F4},
	{"f5",                  SDLK_F5},
	{"f6",                  SDLK_F6},
	{"f7",                  SDLK_F7},
	{"f8",                  SDLK_F8},
	{"f9",                  SDLK_F9},
	{"f10",                 SDLK_F10},
	{"f11",                 SDLK_F11},
	{"f12",                 SDLK_F12},
	{"printscreen",         SDLK_PRINTSCREEN},
	{"scrolllock",          SDLK_SCROLLLOCK},
	{"pause",               SDLK_PAUSE},
	{"insert",              SDLK_INSERT},
	{"home",                SDLK_HOME},
	{"pageup",              SDLK_PAGEUP},
	{"delete",              SDLK_DELETE},
	{"end",                 SDLK_END},
	{"pagedown",            SDLK_PAGEDOWN},
	{"right",               SDLK_RIGHT},
	{"left",                SDLK_LEFT},
	{"down",                SDLK_DOWN},
	{"up",                  SDLK_UP},
	{"numberlockclear",     SDLK_NUMLOCKCLEAR},
	{"kpdivide",            SDLK_KP_DIVIDE},
	{"kpmultiply",          SDLK_KP_MULTIPLY},
	{"kpminus",             SDLK_KP_MINUS},
	{"kpplus",              SDLK_KP_PLUS},
	{"kpequals",            SDLK_KP_EQUALS},
	{"kpenter",             SDLK_KP_ENTER},
	{"kp1",                 SDLK_KP_1},
	{"kp2",                 SDLK_KP_2},
	{"kp3",                 SDLK_KP_3},
	{"kp4",                 SDLK_KP_4},
	{"kp5",                 SDLK_KP_5},
	{"kp6",                 SDLK_KP_6},
	{"kp7",                 SDLK_KP_7},
	{"kp8",                 SDLK_KP_8},
	{"kp9",                 SDLK_KP_9},
	{"kp0",                 SDLK_KP_0},
	{"kpperiod",            SDLK_KP_PERIOD},
	{"kpcomma",             SDLK_KP_COMMA},
	{"kpequals400",         SDLK_KP_EQUALSAS400},
	{"application",         SDLK_APPLICATION},
	{"power",               SDLK_POWER},
	{"f13",                 SDLK_F13},
	{"f14",                 SDLK_F14},
	{"f15",                 SDLK_F15},
	{"f16",                 SDLK_F16},
	{"f17",                 SDLK_F17},
	{"f18",                 SDLK_F18},
	{"f19",                 SDLK_F19},
	{"f20",                 SDLK_F20},
	{"f21",                 SDLK_F21},
	{"f22",                 SDLK_F22},
	{"f23",                 SDLK_F23},
	{"f24",                 SDLK_F24},
	{"execute",             SDLK_EXECUTE},
	{"hemp",                SDLK_HELP},
	{"menu",                SDLK_MENU},
	{"select",              SDLK_SELECT},
	{"stop",                SDLK_STOP},
	{"again",               SDLK_AGAIN},
	{"undo",                SDLK_UNDO},
	{"cut",                 SDLK_CUT},
	{"copy",                SDLK_COPY},
	{"paste",               SDLK_PASTE},
	{"find",                SDLK_FIND},
	{"mute",                SDLK_MUTE},
	{"volumeup",            SDLK_VOLUMEUP},
	{"volumedown",          SDLK_VOLUMEDOWN},
	{"alterase",            SDLK_ALTERASE},
	{"sysreq",              SDLK_SYSREQ},
	{"cancel",              SDLK_CANCEL},
	{"clear",               SDLK_CLEAR},
	{"prior",               SDLK_PRIOR},
	{"return2",             SDLK_RETURN2},
	{"seperator",           SDLK_SEPARATOR},
	{"out",                 SDLK_OUT},
	{"oper",                SDLK_OPER},
	{"clearagain",          SDLK_CLEARAGAIN},
	{"crsel",               SDLK_CRSEL},
	{"exsel",               SDLK_EXSEL},
	{"kp00",                SDLK_KP_00},
	{"kp000",               SDLK_KP_000},
	{"thousandsseparator",  SDLK_THOUSANDSSEPARATOR},
	{"decimalseperator",    SDLK_DECIMALSEPARATOR},
	{"currencyunit",        SDLK_CURRENCYUNIT},
	{"currencysubunit",     SDLK_CURRENCYSUBUNIT},
	{"kpleftparen",         SDLK_KP_LEFTPAREN},
	{"kprightparen",        SDLK_KP_RIGHTPAREN},
	{"kpleftbrace",         SDLK_KP_LEFTBRACE},
	{"kprightbreace",       SDLK_KP_RIGHTBRACE},
	{"kptab",               SDLK_KP_TAB},
	{"kpbackspace",         SDLK_KP_BACKSPACE},
	{"kpa",                 SDLK_KP_A},
	{"kpb",                 SDLK_KP_B},
	{"kpc",                 SDLK_KP_C},
	{"kpd",                 SDLK_KP_D},
	{"kpe",                 SDLK_KP_E},
	{"kpf",                 SDLK_KP_F},
	{"kpxor",               SDLK_KP_XOR},
	{"kppower",             SDLK_KP_POWER},
	{"kppercent",           SDLK_KP_PERCENT},
	{"kpless",              SDLK_KP_LESS},
	{"kpgreater",           SDLK_KP_GREATER},
	{"kpampersand",         SDLK_KP_AMPERSAND},
	{"kpdblampersand",      SDLK_KP_DBLAMPERSAND},
	{"kpverticalbar",       SDLK_KP_VERTICALBAR},
	{"kpdblverticalbar",    SDLK_KP_DBLVERTICALBAR},
	{"kpcolon",             SDLK_KP_COLON},
	{"kphash",              SDLK_KP_HASH},
	{"kpspace",             SDLK_KP_SPACE},
	{"kpat",                SDLK_KP_AT},
	{"kpexclam",            SDLK_KP_EXCLAM},
	{"kpmemstore",          SDLK_KP_MEMSTORE},
	{"kpmemrecall",         SDLK_KP_MEMRECALL},
	{"kpmemclear",          SDLK_KP_MEMCLEAR},
	{"kpmemadd",            SDLK_KP_MEMADD},
	{"kpmemsubtract",       SDLK_KP_MEMSUBTRACT},
	{"kpmemultiply",        SDLK_KP_MEMMULTIPLY},
	{"kpmemdivide",         SDLK_KP_MEMDIVIDE},
	{"kpplusminus",         SDLK_KP_PLUSMINUS},
	{"kpclear",             SDLK_KP_CLEAR},
	{"kpclearentry",        SDLK_KP_CLEARENTRY},
	{"kpbinary",            SDLK_KP_BINARY},
	{"kpoctal",             SDLK_KP_OCTAL},
	{"kpdecimal",           SDLK_KP_DECIMAL},
	{"kphexadecimal",       SDLK_KP_HEXADECIMAL},
	{"lctrl",               SDLK_LCTRL},
	{"lshift",              SDLK_LSHIFT},
	{"lalt",                SDLK_LALT},
	{"lgui",                SDLK_LGUI},
	{"rctrl",               SDLK_RCTRL},
	{"rshift",              SDLK_RSHIFT},
	{"ralt",                SDLK_RALT},
	{"rgui",                SDLK_RGUI},
	{"mode",                SDLK_MODE},
	{"audionext",           SDLK_AUDIONEXT},
	{"audioprev",           SDLK_AUDIOPREV},
	{"audiostop",           SDLK_AUDIOSTOP},
	{"audioplay",           SDLK_AUDIOPLAY},
	{"audiomute",           SDLK_AUDIOMUTE},
	{"mediaselect",         SDLK_MEDIASELECT},
	{"www",                 SDLK_WWW},
	{"mail",                SDLK_MAIL},
	{"calculator",          SDLK_CALCULATOR},
	{"computer",            SDLK_COMPUTER},
	{"acsearch",            SDLK_AC_SEARCH},
	{"achome",              SDLK_AC_HOME},
	{"acback",              SDLK_AC_BACK},
	{"acforward",           SDLK_AC_FORWARD},
	{"acstop",              SDLK_AC_STOP},
	{"acrefresh",           SDLK_AC_REFRESH},
	{"acbookmarks",         SDLK_AC_BOOKMARKS},
	{"kpbrightnessdown",    SDLK_BRIGHTNESSDOWN},
	{"kpbrightnessup",      SDLK_BRIGHTNESSUP},
	{"kpdisplayswitch",     SDLK_DISPLAYSWITCH},
	{"kbdillumtoggle",      SDLK_KBDILLUMTOGGLE},
	{"kbdillumdown",        SDLK_KBDILLUMDOWN},
	{"kbdillumup",          SDLK_KBDILLUMUP},
	{"eject",               SDLK_EJECT},
	{"sleep",               SDLK_SLEEP},
	{"app1",                SDLK_APP1},
	{"app2",                SDLK_APP2},
	{"audiorewind",         SDLK_AUDIOREWIND},
	{"audiofastforward",    SDLK_AUDIOFASTFORWARD},
};

std::unordered_map<std::string, GamepadButton> Struktur::Core::skInput::s_controllerButtonMap = {
	{"a",           SDL_CONTROLLER_BUTTON_A},
	{"b",           SDL_CONTROLLER_BUTTON_B},
	{"x",           SDL_CONTROLLER_BUTTON_X},
	{"y",           SDL_CONTROLLER_BUTTON_Y},
	{"select",      SDL_CONTROLLER_BUTTON_BACK},
	{"guide",       SDL_CONTROLLER_BUTTON_GUIDE},
	{"start",       SDL_CONTROLLER_BUTTON_START},
	{"ljoystick",   SDL_CONTROLLER_BUTTON_LEFTSTICK},
	{"rjoystick",   SDL_CONTROLLER_BUTTON_RIGHTSTICK},
	{"ltrigger",    SDL_CONTROLLER_BUTTON_LEFTSHOULDER},
	{"rtrigger",    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER},
	{"up",          SDL_CONTROLLER_BUTTON_DPAD_UP},
	{"down",        SDL_CONTROLLER_BUTTON_DPAD_DOWN},
	{"left",        SDL_CONTROLLER_BUTTON_DPAD_LEFT},
	{"right",       SDL_CONTROLLER_BUTTON_DPAD_RIGHT},
	{"misc",        SDL_CONTROLLER_BUTTON_MISC1},
	{"paddle1",     SDL_CONTROLLER_BUTTON_PADDLE1},
	{"paddle2",     SDL_CONTROLLER_BUTTON_PADDLE2},
	{"paddle3",     SDL_CONTROLLER_BUTTON_PADDLE3},
	{"paddle4",     SDL_CONTROLLER_BUTTON_PADDLE4},
	{"touchpad",    SDL_CONTROLLER_BUTTON_TOUCHPAD},
};

std::unordered_map<std::string, GamepadAxis> Struktur::Core::skInput::s_controllerAxisMap = {
	{"leftx",       SDL_CONTROLLER_AXIS_LEFTX},
	{"lefty",       SDL_CONTROLLER_AXIS_LEFTY},
	{"rightx",      SDL_CONTROLLER_AXIS_RIGHTX},
	{"rightx",      SDL_CONTROLLER_AXIS_RIGHTY},
	{"lefttrigger", SDL_CONTROLLER_AXIS_TRIGGERLEFT},
	{"rightTrigger",SDL_CONTROLLER_AXIS_TRIGGERRIGHT},
};